import cv2
import numpy as np
from google.colab.patches import cv2_imshow

image = cv2.imread("lava20.jpg")

hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

h, w, _ = hsv.shape
image_reshaped = hsv.reshape(-1, 3).astype(np.float32)

# Define the number of clusters (K)
K = 4 # Change this to the desired number of clusters

# Apply K-Means clustering
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1)
_, labels, centers = cv2.kmeans(image_reshaped, K, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)

# Convert the centers to 8-bit integers
centers = np.uint8(centers)

# Map each pixel to its corresponding center color
clustered = centers[labels.flatten()].reshape(h, w, -1)

lower_color = np.array([0, 200, 150])  # Replace with your values
upper_color = np.array([30, 255, 255])  # Replace with your values

# Create a mask using inRange to segment out the specified color
mask = cv2.inRange(hsv, lower_color, upper_color)

# Apply the mask to extract the segmented part of the image
segmented_image = cv2.bitwise_and(image, image , mask=mask)

sobel_x = cv2.Sobel(segmented_image, cv2.CV_64F, 1, 0, ksize=3)
sobel_y = cv2.Sobel(segmented_image, cv2.CV_64F, 0, 1, ksize=3)
gradient_magnitude = np.sqrt(sobel_x**2 + sobel_y**2)

# Normalize the gradient magnitude to the range [0, 255]
gradient_magnitude = cv2.normalize(gradient_magnitude, None, 0, 255, cv2.NORM_MINMAX)

gradient_bgr = cv2.applyColorMap(gradient_magnitude.astype(np.uint8), cv2.COLORMAP_JET)

# Convert color-mapped gradient to grayscale
gradient_gray = cv2.cvtColor(gradient_bgr, cv2.COLOR_BGR2GRAY)

# Apply threshold to the grayscale image
_, thresholded = cv2.threshold(gradient_gray, 30, 255, cv2.THRESH_BINARY)

binary = thresholded

kernel = np.ones((5, 5), np.uint8)

erosion_result = cv2.erode(binary, kernel, iterations=1)

final = cv2.dilate(erosion_result, kernel, iterations=1)

contours, _ = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

max= 0
for contour in contours:
    if cv2.contourArea(contour)>max:
      max = cv2.contourArea(contour)
final = binary.copy()


kernel = np.ones((5, 5), np.uint8)  # Define a 5x5 square structuring element

dilation_result = cv2.dilate(final, kernel, iterations=2)

final = cv2.erode(dilation_result, kernel, iterations=1)

erosion_result = cv2.erode(final, kernel, iterations=2)

final = cv2.dilate(erosion_result, kernel, iterations=1)

contours, _ = cv2.findContours(final, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

copy = final.copy()

# Choose a color (in BGR format) for the segmented region
segmented_color = (255,255, 255)  # Green color

# Iterate over contours and fill them with the chosen color
for contour in contours:
    cv2.drawContours(copy, [contour], 0, segmented_color, thickness=cv2.FILLED)
    
    contours, _ = cv2.findContours(copy, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# count=0
# blank_image = np.zeros((h, w, 3), dtype=np.uint8)
# output_image = blank_image

# for contour in contours:
#     if cv2.contourArea(contour)>500:
#       count+=1

# if count>1 :
#     output_image = blank_image
# else:
if contours:
        # Find the largest contour based on the area
    largest_contour = max(contours, key=cv2.contourArea)

        # Create an empty mask and fill the largest contour with white
    canvas = np.zeros((h, w, 3), dtype=np.uint8)
    output_image = cv2.drawContours(canvas, [largest_contour], 0, (255,255,255), thickness=cv2.FILLED)
    
    # gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

sobel_x = cv2.Sobel(image, cv2.CV_64F, 1, 0, ksize=3)
sobel_y = cv2.Sobel(image, cv2.CV_64F, 0, 1, ksize=3)
gradient_magnitude = np.sqrt(sobel_x**2 + sobel_y**2)

# Normalize the gradient magnitude to the range [0, 255]
gradient_magnitude = cv2.normalize(gradient_magnitude, None, 0, 255, cv2.NORM_MINMAX)

cv2_imshow(gradient_magnitude)

# Apply thresholding to create a binary mask based on gradient magnitude
_, binary_mask = cv2.threshold(gradient_magnitude.astype(np.uint8), 50, 255, cv2.THRESH_BINARY)
